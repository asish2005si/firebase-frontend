{
  "entities": {
    "ContactRequest": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContactRequest",
      "type": "object",
      "description": "Represents a contact request submitted by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the contact request."
        },
        "name": {
          "type": "string",
          "description": "Name of the person submitting the request."
        },
        "email": {
          "type": "string",
          "description": "Email address of the person submitting the request.",
          "format": "email"
        },
        "message": {
          "type": "string",
          "description": "The message content of the contact request."
        },
        "submittedAt": {
          "type": "string",
          "description": "Timestamp indicating when the contact request was submitted.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "message",
        "submittedAt"
      ]
    },
    "PersonalizedOffer": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "PersonalizedOffer",
      "type": "object",
      "description": "Represents a personalized banking offer generated by AI.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the personalized offer."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N PersonalizedOffer)"
        },
        "offerType": {
          "type": "string",
          "description": "Type of the offer, e.g., 'Loan', 'Investment'."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the offer."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the offer was created.",
          "format": "date-time"
        },
        "expiryDate": {
          "type": "string",
          "description": "Date when the offer expires.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "offerType",
        "description",
        "createdAt",
        "expiryDate"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the Smart Bank application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "firstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "createdAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles.  The 'userId' parameter is the unique identifier for each user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/personalizedOffers/{offerId}",
        "definition": {
          "entityName": "PersonalizedOffer",
          "schema": {
            "$ref": "#/backend/entities/PersonalizedOffer"
          },
          "description": "Stores personalized offers for each user. Includes denormalized 'userId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "offerId",
              "description": "The unique identifier for the personalized offer."
            }
          ]
        }
      },
      {
        "path": "/contactRequests/{contactRequestId}",
        "definition": {
          "entityName": "ContactRequest",
          "schema": {
            "$ref": "#/backend/entities/ContactRequest"
          },
          "description": "Stores contact requests submitted by users. Accessible by administrators for handling support requests.",
          "params": [
            {
              "name": "contactRequestId",
              "description": "The unique identifier for the contact request."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to provide a secure and scalable backend for the Smart Bank application, focusing on authorization independence and clear access control. User data and personalized offers are organized under user-specific collections, while contact requests are stored in a separate collection accessible by admins. The structure enables simple, robust, and easily debuggable security rules.\n\nAuthorization Independence:\nPersonalized offers are stored in a subcollection `/users/{userId}/personalizedOffers/{offerId}`. This structure inherently provides authorization independence because access control is based on the `userId` in the path. No `get()` calls are required to determine access rights based on parent document data.\n\nQAPs (Rules are not Filters):\nThe design supports secure `list` operations by segregating data based on ownership. For example, listing personalized offers is done within the user's subcollection (`/users/{userId}/personalizedOffers`), ensuring that only the offers belonging to that user are accessible. Contact requests are stored in a separate collection that can be secured with admin roles, enabling secure listing for authorized personnel only.\n\nInvariants:\nThe structure inherently supports the integrity of ownership, timestamps, and denormalized data due to its hierarchical and segregated nature. Ownership is clearly defined by the path-based structure, and timestamps are included in the data models."
  }
}