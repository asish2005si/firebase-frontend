
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isAdmin() {
      // Check if the user has an 'admin' role in the /users/{uid} document.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    match /users/{userId} {
      // Users can read/write their own profile. Admins can read/write any profile.
      allow read, write: if request.auth.uid == userId || isAdmin();
    }
    
    match /applications/{appId} {
      // Anyone can create a new account application.
      allow create;
      // Only admins can read or update applications (e.g., to approve/reject).
      allow read, update: if isAdmin();
    }

    match /loan-applications/{appId} {
      // Any authenticated user can create a loan application for themselves.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Users can read their own applications. Admins can read all applications.
      allow read: if (request.auth != null && resource.data.userId == request.auth.uid) || isAdmin();
    }

    match /transactions/{transactionId} {
      // Users can only read their own transactions.
      allow read: if request.auth != null && resource.data.performed_by == request.auth.uid;
      // Nobody can write directly to transactions for data integrity. This should be handled by backend functions.
      allow write: if false; 
    }
  }
}
